
from pandas import read_csv, isnull
from os import path
from hashlib import sha256
from Bio import SeqIO
from collections import defaultdict

# Defaults
segment_flanks = 50000
models = { "MCP_PLV": "Blosum62+F+R5", "MCP_NCLDV": "LG+F+R9" }

# Get variables from globs
genomes,       = glob_wildcards("genomes/{genome}.fna")
algal_genomes, = glob_wildcards("genomes_algae/{genome}.fna")
hmms,          = glob_wildcards("hmm/{hmm}.hmm")
hmm_algae,     = glob_wildcards("hmm_algae/{hmm}.hmm")
capsid_proteins = defaultdict(list)

# Get variables from files
with open("metadata/capsid_proteins.txt") as fh:
    for line in fh:
        hmm, CP = line.rstrip().split()
        capsid_proteins[CP].append(hmm)

segments_file = 'metadata/viral_segments.tsv'
viruses_file  = 'metadata/viruses.tsv'

evalues = { "MCP_PLV": 1e-8, "MCP_NCLDV": 1e-8 }

segments = {}
Gezel_segments = []
data = read_csv(segments_file, sep = '\t')
for i, row in data.iterrows():
    if isnull(row['fragment']):
        short = row['short']
        segments[short] = row.to_dict()
        if row['clade'] == 'Gezel':
            Gezel_segments.append(short)
segment_names = list(segments.keys())

viruses = {}
small_viruses = []
Gezel_viruses = []
Mesomimi_viruses = []
data = read_csv(viruses_file, sep = '\t')
for i, row in data.iterrows():
    if isnull(row['fragment']):
        short = row['short']
        viruses[short] = row.to_dict()
        if row['clade'] == 'Gezel':
            Gezel_viruses.append(short)
        if row['clade'] == 'Mesomimi':
            Mesomimi_viruses.append(short)
        if row['group'] == 'small':
            small_viruses.append(short)
virus_names = list(viruses.keys())

# Include dependent snakefiles
include: "Promoters.snakefile"
include: "Get_viruses.snakefile"
include: "Segments_extract.snakefile"
include: "Segments_search.snakefile"
include: "Phylogeny_with_algae.snakefile"
include: "Vcontact.snakefile"
include: "Remote_homology.snakefile"
include: "Phylogeny_viruses.snakefile"

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

exposed_rules = [ 'viruses_ncbi_fna', 'mcp_algae', 'promoters', 'remote_homology', 'extract_segments', 'search_segments', 'vcontact', 'phylogeny' ]

rule default:
    run:
        print(f"{bcolors.FAIL}No task selected - choose one of %s\nKeep in mind that all rules except search_segments are dependent on extract_segments{bcolors.ENDC}\n" % ', '.join(exposed_rules))

rule makeblastdb_prot:
    input:
        "{fasta}"
    output:
        "{fasta}.pdb"
    conda:
        "envs/tools.yaml"
    shell:
        "makeblastdb -in {input} -dbtype prot"

rule makeblastdb_nucl:
    input:
        "{fasta}"
    output:
        "{fasta}.ndb"
    conda:
        "envs/tools.yaml"
    shell:
        "makeblastdb -in {input} -dbtype nucl"

rule faidx:
    input:
        "{fasta}"
    output:
        "{fasta}.fai"
    conda:
        "envs/tools.yaml"
    shell:
        "seqkit faidx {input}"

rule faidx_f:
    input:
        "{fasta}"
    output:
        "{fasta}.seqkit.fai"
    conda:
        "envs/tools.yaml"
    shell:
        "seqkit faidx -f {input}"

rule mad:
    input:
        "{treefile}"
    output:
        "{treefile}.rooted"
    shell:
        "mad {input}"
